// <auto-generated />
using System;
using BookStore.Dal.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BookStore.Dal.Migrations
{
    [DbContext(typeof(BookStoreDbContext))]
    [Migration("20201025144944_Order")]
    partial class Order
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("BookStore.Dal.Domain.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("UserId");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("BookStore.Dal.Domain.UserBook", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BookUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2")
                        .HasComment("Modified");

                    b.Property<int>("UserBookId")
                        .HasColumnType("int");

                    b.Property<bool>("isCart")
                        .HasColumnType("bit");

                    b.Property<bool>("isWishList")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("BookUserId");

                    b.HasIndex("UserBookId");

                    b.ToTable("UserBooks");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BookUserId = 1,
                            CreatedAt = new DateTime(2020, 10, 25, 14, 49, 42, 138, DateTimeKind.Utc).AddTicks(9363),
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserBookId = 1,
                            isCart = true,
                            isWishList = false
                        },
                        new
                        {
                            Id = 2,
                            BookUserId = 3,
                            CreatedAt = new DateTime(2020, 10, 25, 14, 49, 42, 139, DateTimeKind.Utc).AddTicks(1611),
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserBookId = 1,
                            isCart = false,
                            isWishList = false
                        },
                        new
                        {
                            Id = 3,
                            BookUserId = 4,
                            CreatedAt = new DateTime(2020, 10, 25, 14, 49, 42, 139, DateTimeKind.Utc).AddTicks(1643),
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserBookId = 1,
                            isCart = true,
                            isWishList = false
                        },
                        new
                        {
                            Id = 4,
                            BookUserId = 4,
                            CreatedAt = new DateTime(2020, 10, 25, 14, 49, 42, 139, DateTimeKind.Utc).AddTicks(1645),
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserBookId = 2,
                            isCart = true,
                            isWishList = false
                        },
                        new
                        {
                            Id = 5,
                            BookUserId = 3,
                            CreatedAt = new DateTime(2020, 10, 25, 14, 49, 42, 139, DateTimeKind.Utc).AddTicks(1647),
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserBookId = 2,
                            isCart = true,
                            isWishList = false
                        },
                        new
                        {
                            Id = 6,
                            BookUserId = 2,
                            CreatedAt = new DateTime(2020, 10, 25, 14, 49, 42, 139, DateTimeKind.Utc).AddTicks(1652),
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserBookId = 2,
                            isCart = false,
                            isWishList = false
                        });
                });

            modelBuilder.Entity("BookStore.Domain.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Image")
                        .HasColumnType("varbinary(max)");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2")
                        .HasComment("Modified");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Author = "naziv_autora_1",
                            CreatedAt = new DateTime(2020, 10, 23, 10, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "faruk",
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "naziv_knjige_1",
                            Price = 10f,
                            Quantity = 0
                        },
                        new
                        {
                            Id = 2,
                            Author = "naziv_autora_2",
                            CreatedAt = new DateTime(2020, 10, 23, 10, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "faruk",
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "naziv_knjige_2",
                            Price = 20f,
                            Quantity = 0
                        },
                        new
                        {
                            Id = 3,
                            Author = "naziv_autora_3",
                            CreatedAt = new DateTime(2020, 10, 23, 10, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "faruk",
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "naziv_knjige_3",
                            Price = 15f,
                            Quantity = 0
                        },
                        new
                        {
                            Id = 4,
                            Author = "naziv_autora_4",
                            CreatedAt = new DateTime(2020, 10, 23, 10, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "faruk",
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "naziv_knjige_4",
                            Price = 25f,
                            Quantity = 0
                        });
                });

            modelBuilder.Entity("BookStore.Domain.BookCategory", b =>
                {
                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.HasKey("BookId", "CategoryId");

                    b.ToTable("BookCategories");

                    b.HasData(
                        new
                        {
                            BookId = 1,
                            CategoryId = 1
                        },
                        new
                        {
                            BookId = 2,
                            CategoryId = 1
                        },
                        new
                        {
                            BookId = 2,
                            CategoryId = 2
                        });
                });

            modelBuilder.Entity("BookStore.Domain.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2")
                        .HasComment("Modified");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryName = "Poezija",
                            CreatedAt = new DateTime(2020, 10, 23, 10, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "faruk",
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            CategoryName = "Drama",
                            CreatedAt = new DateTime(2020, 10, 23, 10, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "faruk",
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("BookStore.Domain.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Adress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2")
                        .HasComment("Modified");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2020, 10, 22, 10, 7, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "faruk",
                            Email = "ohran.faruk@hotmail.com",
                            FirstName = "Faruk",
                            IsAdmin = false,
                            LastName = "Ohran",
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Password = "123456"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2020, 10, 22, 10, 7, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "jasir",
                            Email = "jasir.buric@hotmail.com",
                            FirstName = "Jasir",
                            IsAdmin = false,
                            LastName = "Buric",
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Password = "123456"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2020, 10, 22, 10, 7, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "muhamed",
                            Email = "muhamed.halkic@hotmail.com",
                            FirstName = "Muhamed",
                            IsAdmin = false,
                            LastName = "Halkic",
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Password = "123456"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2020, 10, 22, 10, 7, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "mirzad",
                            Email = "mirzad.varupa@hotmail.com",
                            FirstName = "Mirzad",
                            IsAdmin = false,
                            LastName = "Varupa",
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Password = "123456"
                        });
                });

            modelBuilder.Entity("BookStore.Dal.Domain.Order", b =>
                {
                    b.HasOne("BookStore.Domain.Book", "Book")
                        .WithMany("Orders")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookStore.Domain.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BookStore.Dal.Domain.UserBook", b =>
                {
                    b.HasOne("BookStore.Domain.Book", "Book")
                        .WithMany("Books")
                        .HasForeignKey("BookUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookStore.Domain.User", "User")
                        .WithMany("Books")
                        .HasForeignKey("UserBookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BookStore.Domain.BookCategory", b =>
                {
                    b.HasOne("BookStore.Domain.Book", "Book")
                        .WithMany("Categories")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookStore.Domain.Category", "Category")
                        .WithMany("Categories")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
